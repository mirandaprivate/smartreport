{{ range $_, $service := .Services }}
{{ getAllLeadingComments . 0 }}export class {{ $service.Name }}ServiceClient { {{- range .Methods }}
{{ getAllLeadingComments . 1 }}    public static {{ .Name }}(
        reqMsg: {{ if .ClientStreaming }}Observable<{{ getFullTsName .Input }}>{{ else }}{{ getFullTsName .Input }}{{ end }},
    ): grpc.ClientRpcDescriptor<{{ getFullTsName .Input }}, {{ getFullTsName .Output }}> {
        return new grpc.ClientRpcDescriptorBuilder<{{ getFullTsName .Input }}, {{ getFullTsName .Output }}>()
            .path('{{ getGrpcPath . $service.Name }}')
            .decodeResponse((data: Buffer): {{ getFullTsName .Output }} =>
                new {{ getFullTsName .Output }}Builder().decode(data).build(),
            )
            .encodeRequest((reqMsg: {{ getFullTsName .Input }}): Buffer => {
                const bin = reqMsg.encode()
                return bin instanceof Uint8Array ? Buffer.from(bin): Buffer.from('')
            })
            .clientStream({{ .ClientStreaming }})
            .serverStream({{ .ServerStreaming }})
            .reqMsg(reqMsg)
            .build()
    }{{ end }}
}
{{ end }}
